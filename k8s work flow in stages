Kubernetes Pod Creation Flow 🏨
When You Run: kubectl create pod my-app
YOU → kubectl → API Server → etcd → Scheduler → kubelet → Pod Running

STEP-BY-STEP FLOW
STEP 1: You Make the Request
kubectl create pod my-app --image=nginx
What happens: kubectl sends HTTP request to API Server

STEP 2: API Server (Reception Desk)
API Server receives request
├── Authentication: "Who are you?"
├── Authorization: "Can you create pods?"
├── Admission Control: "Is your request valid?"
└── If OK → Store in etcd
Status: Pod created with state = "Pending"

STEP 3: etcd (Hotel Database)
etcd stores:
{
  "pod": "my-app",
  "status": "Pending",
  "node": "unassigned",
  "image": "nginx"
}

STEP 4: Scheduler (Room Assignment Manager)
Scheduler watches etcd for unassigned pods
├── Finds: my-app (status=Pending, node=unassigned)
├── Checks all nodes: node1, node2, node3
├── Picks best node: node2 (has resources)
└── Updates etcd: my-app → node2
Status: Pod scheduled to node2

STEP 5: kubelet on node2 (Floor Supervisor)
kubelet watches etcd for pods assigned to its node
├── Sees: my-app assigned to me
├── Pulls image: docker pull nginx
├── Creates container: docker run nginx
├── Assigns IP: 10.244.2.5
└── Reports back: "Pod is Running"
Status: Pod = "Running"

STEP 6: kube-proxy (Phone System)
kube-proxy updates networking rules
├── Pod IP: 10.244.2.5 is reachable
├── Service discovery: my-app can be found
└── Load balancing: Traffic can reach pod

STEP 7: Controller Manager (Operations Manager)
Controller Manager monitors:
├── "Is my-app still running?" ✅
├── "Does it match desired state?" ✅
├── "If it dies, recreate it" (for Deployments)
└── Continuous monitoring loop

VISUAL TIMELINE
Time: 0ms    → kubectl command sent
Time: 10ms   → API Server validates & stores in etcd
Time: 50ms   → Scheduler picks node2
Time: 100ms  → kubelet starts pulling image
Time: 5000ms → Image pulled, container started
Time: 5500ms → Pod reports "Running"
Time: 6000ms → kube-proxy updates networking

QUICK STATUS CHECK
Check what's happening:
kubectl get pods -w    # Watch real-time changes
kubectl describe pod my-app    # See the events
You'll see:
0s   Scheduled    Pod assigned to node2
2s   Pulling      Pulling image "nginx"
8s   Pulled       Successfully pulled image
10s  Created      Created container
12s  Started      Started container

WHAT IF SOMETHING FAILS?
Scenario 1: No Available Nodes
API Server ✅ → etcd ✅ → Scheduler ❌ (no nodes with resources)
Status: Pod stays "Pending"
Scenario 2: Image Pull Fails
API Server ✅ → etcd ✅ → Scheduler ✅ → kubelet ❌ (can't pull image)
Status: Pod = "ImagePullBackOff"
Scenario 3: API Server Down
kubectl → API Server ❌
Result: "connection refused"

THE HOTEL ANALOGY IN ACTION

Guest calls hotel → kubectl create pod
Reception takes booking → API Server validates
Booking recorded → etcd storage
Manager assigns room → Scheduler picks node
Floor supervisor prepares room → kubelet runs container
Phone system updated → kube-proxy configures networking
Guest checks in successfully → Pod status = "Running"
